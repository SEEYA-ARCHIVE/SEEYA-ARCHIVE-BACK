name: Build API and Deploy

on:
  push:
    branches:
      - "feature/infrastructure-settings"

jobs:
  example-job:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Repo
        uses: actions/checkout@v2
      # Login to docker
      # This can be used for both Docker Hub and
      # GitHub container registry.
      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.aws_account_number }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REGISTRY }}
          username: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
      # Build the docker image and push it.
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: seeyaarchive-server:${{ github.sha }}

  #  Name of the job is deploy
  deploy:
    needs: example-job
    runs-on: ubuntu-latest
    steps:
      # Login to docker
      # This can be used for both Docker Hub and
      # GitHub container registry.
      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.aws_account_number }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REGISTRY }}
          username: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}

      # SSH into the server
      - name: executing remote ssh commands using ssh key
        run: |
          echo "${{ secrets.CA_PEM }}" > ca.pem
          echo "${{ secrets.CERT_PEM }}" > cert.pem
          echo "${{ secrets.KEY_PEM }}" > key.pem
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo MY_AWS_SECRET_ACCESS_KEY="${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}" >> .env
          echo MY_AWS_ACCESS_KEY_ID="${{ secrets.MY_AWS_ACCESS_KEY_ID }}" >> .env
          echo SERVER_HOST="${{ secrets.SERVER_HOST }}" >> .env
          echo KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" >> .env
          echo KAKAO_REDIRECT_URI="${{ secrets.KAKAO_REDIRECT_URI }}" >> .env
          echo KAKAO_SECRET_KEY="${{ secrets.KAKAO_SECRET_KEY }}" >> .env
          echo KAKAO_ADMIN_KEY="${{ secrets.KAKAO_ADMIN_KEY }}" >> .env
          echo AWS_STORAGE_BUCKET_NAME="${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo AWS_REGION="${{ secrets.AWS_REGION }}" >> .env
          echo DOMAIN="${{ secrets.DOMAIN }}" >> .env
          echo DOMAIN_GENERAL="${{ secrets.DOMAIN_GENERAL }}" >> .env
          echo DOMAIN_API="${{ secrets.DOMAIN_API }}" >> .env
          echo DOMAIN_SCHEME="${{ secrets.DOMAIN_SCHEME }}" >> .env
          echo DOMAIN_API_SCHEME="${{ secrets.DOMAIN_API_SCHEME }}" >> .env
          echo DOMAIN_WWW_SCHEME="${{ secrets.DOMAIN_WWW_SCHEME }}" >> .env
          echo DB_NAME="${{ secrets.DB_NAME }}" >> .env
          echo DB_USER="${{ secrets.DB_USER }}" >> .env
          echo DB_PASSWORD="${{ secrets.DB_PASSWORD }}" >> .env
          echo DB_HOST="${{ secrets.DB_HOST }}" >> .env
          echo DB_PORT="${{ secrets.DB_PORT }}" >> .env


          docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=${{ secrets.SERVER_HOST }}:${{ secrets.DOCKER_PORT }} rm -f seeyaarchive-server
          docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=${{ secrets.SERVER_HOST }}:${{ secrets.DOCKER_PORT }} run -d --name seeyaarchive-server -p 80:8000 --env-file .env ${{ secrets.REGISTRY }}/seeyaarchive-server:${{ github.sha }}
        shell: bash
